# this compose creates a stack that manages the traffic for the home network
# nginxproxymanager acts as a reverse proxy to the rest of the apps that have a subdomain
# wireguard establishes the vpn connection to a virtual machine elsewhere that acts as a 
# public access point so no ports on my home router need to be exposed

version: '3.3'

services:
  # for connecting to vps front end
  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
#      - SYS_MODULE #optional
    ports:
      - 80:80
      - 81:81
      - 443:443
      - 51820:51820/udp
    environment:
      - PUID=11001
      - PGID=11000
      - TZ=${TZ}
#      - SERVERURL=wireguard.domain.com #optional
#      - SERVERPORT=51820 #optional
#      - PEERDNS=auto #optional
#      - INTERNAL_SUBNET=10.13.13.0 #optional
#      - ALLOWEDIPS=0.0.0.0/0 #optional
#      - PERSISTENTKEEPALIVE_PEERS= #optional
#      - LOG_CONFS=true #optional
    volumes:
      - ${BASE}/wireguard/config:/config
#      - /lib/modules:/lib/modules #optional
    networks:
      - nginx-network
      - nginx-personalwiki
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

  # for routing traffic to our containers
  nginxproxymanager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginxproxymanager
    environment:
      - PUID=11002
      - PGID=11000
    volumes:
      - ${BASE}/nginx/data:/data
      - ${BASE}/nginx/letsencrypt:/etc/letsencrypt
    depends_on: 
      - wireguard
    network_mode: "service:wireguard"
    restart: unless-stopped

networks:
  default:
    name: incoming-traffic
  nginx-network:
    external: true
  nginx-personalwiki:
    external: true
